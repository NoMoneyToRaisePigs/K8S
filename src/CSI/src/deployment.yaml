apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-test-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: com.testlocal.gf
---

##############################################
###########                       ############
###########   Controller plugin   ############
###########                       ############
##############################################

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: test-csi-controller
  namespace: kube-system
spec:
  serviceName: "csi-do"
  replicas: 1
  template:
    metadata:
      labels:
        app: test-csi-controller
        role: csi-do
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: test-csi-controller-sa
      containers:
        - name: csi-provisioner
          # image: quay.io/k8scsi/csi-provisioner:v3.0.0
          # image: k8s.gcr.io/sig-storage/csi-provisioner:v3.0.0  #how to pull this image in China ??
          # image: gcr.io/google-containers/sig-storage/csi-provisioner:v3.0.0
          image: registry.aliyuncs.com/google_containers/csi-provisioner:v3.0.0
          args:
            - "--v=5"
            - "--provisioner=com.testlocal.gf"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-attacher
          # image: quay.io/k8scsi/csi-attacher:v3.3.0
          # image: k8s.gcr.io/sig-storage/csi-attacher:v3.3.0 #how to pull this image in China ??
          image: registry.aliyuncs.com/google_containers/csi-attacher:v3.3.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: test-csi
          image: gf1103/test-csi:1.1
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
          env:
            - name: CSI_ENDPOINT
              value: unix://var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-csi-controller-sa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: test-csi-controller-provisioner-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: test-csi-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:csi-external-provisioner
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: test-csi-controller-attacher-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: test-csi-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:csi-external-attacher
  apiGroup: rbac.authorization.k8s.io

---



########################################
###########                 ############
###########   Node plugin   ############
###########                 ############
########################################

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: test-csi-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: test-csi-node
  template:
    metadata:
      labels:
        app: test-csi-node
        role: csi-do
    spec:
      priorityClassName: system-node-critical
      serviceAccount: test-csi-node-sa
      hostNetwork: true
      containers:
        - name: node-driver-registrar
          # image: quay.io/k8scsi/node-driver-registrar:v2.2.0
          # image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.2.0  #how to pull this image from China ??
          image: registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.2.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
              # TODO(arslan): the registrar is not implemented yet
              # - name: registrar-socket-dir
              #   mountPath: /var/lib/csi/sockets/
        - name: test-csi
          image: gf1103/test-csi:1.1
          args :
            - "--endpoint=$(CSI_ENDPOINT)"
          env:
            - name: CSI_ENDPOINT
              value: unix://csi/csi.sock
          imagePullPolicy: "IfNotPresent"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        # TODO(arslan): the registar is not implemented yet
        #- name: registrar-socket-dir
        #  hostPath:
        #    path: /var/lib/kubelet/device-plugins/
        #    type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/com.testlocal.gf
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-csi-node-sa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-driver-registrar-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: test-csi-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-do-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io          


---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-do-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
